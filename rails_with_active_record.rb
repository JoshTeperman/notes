https://github.com/shannonjen/sinatra_crud_tutorial
https://learn.co/lessons/sinatra-activerecord-reading
https://learn.co/lessons/sinatra-activerecord-associations
https://gist.github.com/victorwhy/45bb5637cd3e7e879ace
====================================================================================================
// SCAFFOLDING //
====================================================================================================
# > Rails automatically generates a resource (car, person, blog_post etc) model in the database.
rails new fancy_cars
cd fancy_cars
rails g scaffold car make color year:integer #column names and column:types (default is string)
# if you pass --no-migration flag it won't create a migration
... creates auto-primary key called 'id'
rake db:migrate  #apply the scaffolding to the database. This will create a table in the databse called 'cars
rails s #start the server
rails server #alternative
=> application mode, can visit localhost:3000/cars
localhost:3000/cars.json 
=> json representation of cars table (API ??)

... Scaffolding createws Migration & Model, and generates JSON response 
====================================================================================================
// DATABASE SETUP //
====================================================================================================
# SQL Lite as default db engine
# server-less (as opposed to MYSQL)
# sits on computer file-system, lets you interact with it
config directory same level as app directory
contains config/database.yml which describes where the database is stored (will be in /db directory)

~/fancy_cars$ rails db
=> takes you to sql_lite console
.help shows available commands to visualise db
.tables => shows tables (cars & schema_migrations)
.headers on => enables column headers
.mode columns => displays columns as columns in db table
select * from cars => will show your table you made in fancy_cars db
# should show id | make | color | year | created_at | updated_at
.exit 
====================================================================================================
// MIGRATIONS // 
====================================================================================================
Generate Migrations with a scaffold generator, or standalone rails generator 'rails g migration migration_name'
Ruby classes that are translated into DB speak : extend ActiveRecord::Migration
Table in the DB keeps track of which migration was applied last 
rake db:migrate (go forward)
rake db:rollback (go back)

File name starts with timestamp (y/m/date/h/m/s) followed by name, which will become the name of the class
eg: when we created Cars, it created 
CreatCars < ActiveRecord::Migration class 
fancy_cars/db/migrate/timestamp_create_cars.rb

# once you've created a migration(s), you create a ruby class, 
# then pass rake db:migrate to apply all migrations in db/migrate folder
Migration code maintains a table called 'schema_migrations' with one column called 'version' (timestamp) stored when migration is applied. Therefore running db:migrate on the same set of migrations multiple times will have no effect. 

ActiveRecord::Migration Subclass

def up #generate db schema changes > eg: create table
end
def down #undo the changes introduced by up method
end
OR
just def change end # will contain create table / method, can call 
rake db:rollback 
#to unapply changes you made during change method

Flexible Database migration:
dont have to specify database type, Ruby database adapter lets you specify logical database types then runs adapter to translate to actual DB type #eg for Postgres, MySQL etc
eg: :string > varchar(255) etc
specify null option:
null: true or false #when false: a not null constraint is added
limit: size (sets the limit on the size of a field, eg: 5 characters)
default: value #default value for the column, is calculated only once, when intitially migrating (careful with dates etc)
precision: value #total number of digits stored for decimals
scale: value #where to put the decimal point 

====================================================================================================
// Create and Drop tables - Modify Columns //
====================================================================================================
Conventions: 
- table names: plural
- id column always created and used as primary key
- timestamps method creates created_at and updated_at columns 

# below is automatically generated by scaffold
class CreateCars < ActiveRecord::Migration
  def change
    create_table :cars do |t|
      t.string :make
      t.string :color
      t.integer :year

      t.timestamps null: false
    end
  end
end

> if you open up rails DB console
sql_lite>$ .schema cars 
=> CREATE TABLE "cars" (will show SQL)
sql_lite>$ rake db:rollback #will delete / rollback and drop_table(:cars) data will be destroyed

add_column :table_name, :column_name, :column_type
remove_column :table_name, :column_name 
rename_column :table_name, :old_column_name, :new_column_name


eg: ADDING COLUMNS
rails g migration AddColumnToUser password:string bsb:string account_number:string # add multiple columns at once
generate migration: 
~/fancy_cars$ rails g migration add_price_to_cars 'price:decimal{10,2}' 
#rails knows you want to add a column to cars table
#below is added to /fancy_cars/db/migrate/timestamp_add_price_to_cars.rb :
> class CreateCars < ActiveRecord::Migration
    def change
      add_column :cars, :price, :decimal, precision: 10, scale: 2 
    end
  end
# add_column takes 3 parameters (table_name, price, decimal ) and a hash {precision: 10, scale: 2}
# cars is automatically generated table name

# now if you run db:migrate, it's going to run (previously reverted migration) CreateCars, and AddPriceToCars because it knows you want the latest version
# therefore 
~/fancy_cars$ rails db 
sq_lite> .schema cars 
=> will show CREATE TABLE "cars" including recently migrated "price" column

SCHEMA File:
~/fancy_cars/db/schema.rb 
# auto-generated from the current state of the database, snapshot of current schema
# if you have a lot of migrations, these are all SQL scrips that have to be run, therefore if you try to download on a new machine an apply SQL scripts its too much, therefore instead you can do
rake db:schema:load # will load the schema.rb file and apply as latest snapshot of the database


eg: RENAMING A COLUMN
 Renaming Columns:
 # if you want to rename a column
 > ~/fancy_cars$ rails g migration rename_make_to_company #specify name of migration
 rename_column :table_name, :old_column_name, :new_column_name 
 # not using scaffolding generator, this is migration generator
 # rename columns is not being recognised so you have to add this column manually inside the migration file
 # will generate class and timestamp, as well as empty change method, where you have to add the logic
 db/migrate/timestamp_rename_make_to_company.rb>
 class RenameMakeToCompany < ActiveRecord::Migration
  def change
    rename_column :cars, :make, :company #rename column make to company in table 'cars'
  end
end

#at theis point if you start server, will get ActiveRecord::PendingMigrationError
#means you have created Migration but not applied to database, therefore
~/fancy_cars$ rake db:migrate

###still when you scaffold this all of you column names are still :make, so you need to change them all to :company

For more on migrations, go to rails guides:
http://guides.rubyonrails.org/migrations.html

====================================================================================================
// ASSOCIATIONS //
====================================================================================================
https://guides.rubyonrails.org/association_basics.html

** belongs_to models must always refer to a model that has been initialised, ie: username must have a user.

ONE TO MANY RELATIONSHIPS

Cat (id, name, age, breed) # id is automatically generated
Owner(id, name, age)
We want to create a model where 
- a cat belongs to an owner # can call @cat.owner.name
- an owner may have many cats # can call @owner.cat.all

Using Foreign Keys
*** When you create a belongs_to association, you MUST create a foreign_key for that model!
Conventions: 
# singularized_table_name_id (e.g., item_id, order_id). 
# These are the fields that Active Record will look for when you create associations between your models.
# Primary keys - By default, Active Record will use an integer column named id as the table's primary key. When using Active Record Migrations to create your tables, this column will be automatically created.

How to Use:
# A foreign key points to a primary key in another table. In ActiveRecord we will use the tablename_id convention. To add the foreign key to our cats table, we will create another migration.
# The foreign key always sits on the table of the object that belongs to. In this case, because cats belong to an owner, the owner_id becomes a column in the cats table.

# Therefore, to tell our tables how they relate to each other (the owner_id), we need to add the foreign key owner_id to our cats table.

class AddColumnToCats < ActiveRecord::Migration
  def change
    add_column :cats, :owner_id, :integer
  end
end

BELONGS_TO
# The belongs_to association sets up a one-to-one connectino, therefore MUST use singular. 
eg: class Cats belongs_to :owner

HAS_ONE
# Sets up a one-to-one association, but from the other side. 
eg: class Supplier has_one :account

HAS_MANY 
# Infers a one-to-many relationship, where a single instances has zero or more of another model, therefore MUST use plural.
eg: class Owner has_many :cats 

# We then need to tell our database how the two tables explicitly relate to each other, in the Model for each of Cat and Owner:

class Cat < ActiveRecord::Base
  belongs_to :owner
end

class Owner < ActiveRecord::Base
  has_many :cats
end

NOTE:
- we always use a belongs_to in conjunctino with a has_many
- belongs_to (cats in this case) always has the foreign key!

testing:

sophie = Owner.create(name: "Sophie", age: 24)
pluckie = Cat.new(name: "Pluckie", age: 2, breed: "scottish-fold")
pluckie.owner_id = sophie.id # Cat pluckie belongs_to Owner sophie

hats = Challenge.new(name: "hats")
josh = User.create(name: "josh")
hats.user_id = josh.id
hats.user_id = josh[:id]

Dependants:

class Owner < ActiveRecord::Base 
  has_many :cats, dependent :destroy
end

# Assuming classs Cat belongs_to :owners, Owner.destroy_all will delete all cats as well.


// Rails Shortcut for creating one-to-many & foreign_key relationships in a migration // 
https://stackoverflow.com/questions/22815009/add-a-reference-column-migration-in-rails-4/22815259#22815259

rails generate migration Parent blah:blah
rails generate migration Child blah:blah
>> rails generate migration AddParentToChilds parent:references >> will create a migration:

class AddParentToChild < ActiveRecord::Migration[5.2]
  def change
    add_reference :childs, :parent, foreign_key: true
  end
end


class AddPodcastToEpisode < ActiveRecord::Migration[5.0]
  def change
    add_reference :episodes, :podcasts, foreign_key: true
  end
end

====================================================================================================
// Adding Validation //
====================================================================================================
class ModelName < ApplicationRecord
  validates :attribute, presence: true, length: { minimum: 5 }
  validates :attribute2, presence: true
  validates :attribute3, presence: true
end

====================================================================================================
// CRUD for - Child Elements //
====================================================================================================
def create
  @parent = Parent.find(params[:parent_id])
  @child = Parent.children.create(parent_params)
  redirect_to parent_path(@parent.id)
end

def delete
  @review = Review.find([:id])
  @restaurant = @review.restaurant #save restaurant so we can redirect_to later
  @review.destroy
  redirect_to restaurant(@restaurant)
end
#and for show.html.erb :
#assumes delete '/reviews/:id', to: 'reviews#delete', as: 'delete_review' in routes.rb
<%= link_to 'Delete Review', delete_review_path(review), method: :delete, data: {confirm: 'Are you sure?'}  

====================================================================================================
// ACTIVE RECORD CALLBACKS //
====================================================================================================

https://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html
